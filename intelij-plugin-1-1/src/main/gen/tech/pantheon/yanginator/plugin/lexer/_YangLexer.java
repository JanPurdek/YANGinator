/*
 * Copyright (c) 2021 PANTHEON.tech, s.r.o. All rights reserved.
 *
 *   This program and the accompanying materials are made available
 *   under the
 *   terms of the Eclipse Public License v1.0 which accompanies this
 *   distribution,  and is available at http://www.eclipse.org/legal/epl-v1.html
 */

/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package tech.pantheon.yanginator.plugin.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_YangLexer.flex</tt>
 */
public class _YangLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\5\2\22\0\1\2\40\0\1\16\1\3\1\6\1\22\1\11\1\14\1\20\1\21\1\17\1\0\1\7"+
    "\1\4\1\10\1\12\1\5\1\26\1\24\1\15\1\25\1\13\1\23\1\31\1\30\1\32\1\0\1\27\4"+
    "\0\1\1\45\0\1\2\32\0\1\2\337\0\1\2\177\0\13\2\35\0\2\2\5\0\1\2\57\0\1\2\40"+
    "\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\22\1\52\0\1\3\11\0\1\4"+
    "\2\0\1\5\13\0\1\6\7\0\1\7\23\0\1\10"+
    "\3\0\1\11\1\12\6\0\1\13\2\0\1\14\12\0"+
    "\1\15\1\16\6\0\1\17\1\20\1\0\1\21\2\0"+
    "\1\22\1\23\2\0\1\24\11\0\1\25\1\0\1\26"+
    "\15\0\1\27\6\0\1\30\30\0\1\31\14\0\1\32"+
    "\3\0\1\33\10\0\1\34\30\0\1\35\7\0\1\36"+
    "\1\0\1\37\5\0\1\40\13\0\1\41\1\0\1\42"+
    "\15\0\1\43\1\0\1\44\13\0\1\45\5\0\1\46"+
    "\1\0\1\47\1\0\1\50\1\0\1\51\2\0\1\52"+
    "\4\0\1\53\2\0\1\54\1\0\1\55\2\0\1\56"+
    "\7\0\1\57\3\0\1\60\1\0\1\61\1\62\3\0"+
    "\1\63\3\0\1\64\1\0\1\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[381];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\33\0\66\0\121\0\154\0\207\0\242\0\275"+
    "\0\330\0\363\0\u010e\0\u0129\0\u0144\0\u015f\0\u017a\0\u0195"+
    "\0\u01b0\0\u01cb\0\u01e6\0\u0201\0\u021c\0\u0237\0\u0252\0\u026d"+
    "\0\u0288\0\u02a3\0\u02be\0\u02d9\0\u02f4\0\u030f\0\u032a\0\u0345"+
    "\0\u0360\0\u037b\0\u0396\0\u03b1\0\u03cc\0\u03e7\0\u0402\0\u041d"+
    "\0\u0438\0\u0453\0\u046e\0\u0489\0\u04a4\0\u04bf\0\u04da\0\u04f5"+
    "\0\u0510\0\u052b\0\u0546\0\u0561\0\u057c\0\u0597\0\u05b2\0\u05cd"+
    "\0\u05e8\0\u0603\0\u061e\0\u0639\0\u0654\0\u066f\0\u068a\0\33"+
    "\0\u06a5\0\u06c0\0\u06db\0\u06f6\0\u0711\0\u072c\0\u0747\0\u0762"+
    "\0\u077d\0\33\0\u0798\0\u07b3\0\33\0\u07ce\0\u07e9\0\u0804"+
    "\0\u081f\0\u083a\0\u0855\0\u0870\0\u088b\0\u08a6\0\u08c1\0\u08dc"+
    "\0\33\0\u08f7\0\u0912\0\u092d\0\u0948\0\u0963\0\u097e\0\u0999"+
    "\0\33\0\u09b4\0\u09cf\0\u09ea\0\u0a05\0\u0a20\0\u0a3b\0\u0a56"+
    "\0\u0a71\0\u0a8c\0\u0aa7\0\u0ac2\0\u0add\0\u0af8\0\u0b13\0\u0b2e"+
    "\0\u0b49\0\u0b64\0\u0b7f\0\u0b9a\0\33\0\u0bb5\0\u0bd0\0\u0beb"+
    "\0\33\0\33\0\u0c06\0\u0c21\0\u0c3c\0\u0c57\0\u0c72\0\u0c8d"+
    "\0\33\0\u0ca8\0\u0cc3\0\33\0\u0cde\0\u0cf9\0\u0d14\0\u0d2f"+
    "\0\u0d4a\0\u0d65\0\u0d80\0\u0d9b\0\u0db6\0\u0dd1\0\33\0\u0dec"+
    "\0\u0e07\0\u0e22\0\u0e3d\0\u0e58\0\u0e73\0\u0e8e\0\33\0\33"+
    "\0\u0ea9\0\33\0\u0ec4\0\u0edf\0\33\0\33\0\u0efa\0\u0f15"+
    "\0\33\0\u0f30\0\u0f4b\0\u0f66\0\u0f81\0\u0f9c\0\u0fb7\0\u0fd2"+
    "\0\u0fed\0\u1008\0\33\0\u1023\0\33\0\u103e\0\u1059\0\u1074"+
    "\0\u108f\0\u10aa\0\u10c5\0\u10e0\0\u10fb\0\u1116\0\u1131\0\u114c"+
    "\0\u1167\0\u1182\0\33\0\u119d\0\u11b8\0\u11d3\0\u11ee\0\u1209"+
    "\0\u1224\0\33\0\u123f\0\u125a\0\u1275\0\u1290\0\u12ab\0\u12c6"+
    "\0\u12e1\0\u12fc\0\u1317\0\u1332\0\u134d\0\u1368\0\u1383\0\u139e"+
    "\0\u13b9\0\u13d4\0\u13ef\0\u140a\0\u1425\0\u1440\0\u145b\0\u1476"+
    "\0\u1491\0\u14ac\0\33\0\u14c7\0\u14e2\0\u14fd\0\u1518\0\u1533"+
    "\0\u154e\0\u1569\0\u1584\0\u159f\0\u15ba\0\u15d5\0\u15f0\0\33"+
    "\0\u160b\0\u1626\0\u1641\0\33\0\u165c\0\u1677\0\u1692\0\u16ad"+
    "\0\u16c8\0\u16e3\0\u16fe\0\u1719\0\33\0\u1734\0\u174f\0\u176a"+
    "\0\u1785\0\u17a0\0\u17bb\0\u17d6\0\u17f1\0\u180c\0\u1827\0\u1842"+
    "\0\u185d\0\u1878\0\u1893\0\u18ae\0\u18c9\0\u18e4\0\u18ff\0\u191a"+
    "\0\u1935\0\u1950\0\u196b\0\u1986\0\u19a1\0\33\0\u19bc\0\u19d7"+
    "\0\u19f2\0\u1a0d\0\u1a28\0\u1a43\0\u1a5e\0\33\0\u1a79\0\33"+
    "\0\u1a94\0\u1aaf\0\u1aca\0\u1ae5\0\u1b00\0\33\0\u1b1b\0\u1b36"+
    "\0\u1b51\0\u1b6c\0\u1b87\0\u1ba2\0\u1bbd\0\u1bd8\0\u1bf3\0\u1c0e"+
    "\0\u1c29\0\33\0\u1c44\0\33\0\u1c5f\0\u1c7a\0\u1c95\0\u1cb0"+
    "\0\u1ccb\0\u1ce6\0\u1d01\0\u1d1c\0\u1d37\0\u1d52\0\u1d6d\0\u1d88"+
    "\0\u1da3\0\33\0\u1dbe\0\33\0\u1dd9\0\u1df4\0\u1e0f\0\u1e2a"+
    "\0\u1e45\0\u1e60\0\u1e7b\0\u1e96\0\u1eb1\0\u1ecc\0\u1ee7\0\33"+
    "\0\u1f02\0\u1f1d\0\u1f38\0\u1f53\0\u1f6e\0\33\0\u1f89\0\33"+
    "\0\u1fa4\0\33\0\u1fbf\0\33\0\u1fda\0\u1ff5\0\33\0\u2010"+
    "\0\u202b\0\u2046\0\u2061\0\33\0\u207c\0\u2097\0\33\0\u20b2"+
    "\0\33\0\u20cd\0\u20e8\0\33\0\u2103\0\u211e\0\u2139\0\u2154"+
    "\0\u216f\0\u218a\0\u21a5\0\33\0\u21c0\0\u21db\0\u21f6\0\33"+
    "\0\u2211\0\33\0\33\0\u222c\0\u2247\0\u2262\0\33\0\u227d"+
    "\0\u2298\0\u22b3\0\33\0\u22ce\0\33";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[381];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\6\1\7\2\2\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\2\2\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\2\1\25\1\2"+
    "\35\0\1\3\34\0\1\26\37\0\1\27\5\0\1\30"+
    "\25\0\1\31\13\0\1\32\10\0\1\33\1\34\10\0"+
    "\1\35\33\0\1\36\4\0\1\37\5\0\1\40\17\0"+
    "\1\41\31\0\1\42\1\43\1\0\1\44\6\0\1\45"+
    "\7\0\1\46\11\0\1\47\32\0\1\50\17\0\1\51"+
    "\3\0\1\52\2\0\1\53\11\0\1\54\16\0\1\55"+
    "\4\0\1\56\21\0\1\57\10\0\1\60\26\0\1\61"+
    "\43\0\1\62\20\0\1\63\5\0\1\64\6\0\1\65"+
    "\10\0\1\66\1\67\3\0\1\70\4\0\1\71\1\72"+
    "\24\0\1\73\32\0\1\74\26\0\1\75\41\0\1\76"+
    "\30\0\1\77\31\0\1\100\32\0\1\101\26\0\1\102"+
    "\31\0\1\103\3\0\1\104\37\0\1\105\35\0\1\106"+
    "\35\0\1\107\15\0\1\110\36\0\1\111\23\0\1\112"+
    "\33\0\1\113\43\0\1\114\22\0\1\115\42\0\1\116"+
    "\5\0\1\117\40\0\1\120\21\0\1\121\40\0\1\122"+
    "\32\0\1\123\5\0\1\124\44\0\1\125\51\0\1\126"+
    "\25\0\1\127\11\0\1\130\6\0\1\131\7\0\1\132"+
    "\34\0\1\133\27\0\1\134\21\0\1\135\31\0\1\136"+
    "\20\0\1\137\13\0\1\140\17\0\1\141\16\0\1\142"+
    "\37\0\1\143\34\0\1\144\22\0\1\145\32\0\1\146"+
    "\43\0\1\147\21\0\1\150\32\0\1\151\23\0\1\152"+
    "\37\0\1\153\30\0\1\154\33\0\1\155\45\0\1\156"+
    "\12\0\1\157\35\0\1\160\37\0\1\161\36\0\1\162"+
    "\27\0\1\163\20\0\1\164\37\0\1\165\43\0\1\166"+
    "\21\0\1\167\51\0\1\170\17\0\1\171\26\0\1\172"+
    "\42\0\1\173\32\0\1\174\22\0\1\175\46\0\1\176"+
    "\16\0\1\177\43\0\1\200\31\0\1\201\15\0\1\202"+
    "\31\0\1\203\50\0\1\204\22\0\1\205\46\0\1\206"+
    "\24\0\1\207\24\0\1\210\41\0\1\211\20\0\1\212"+
    "\51\0\1\213\24\0\1\214\21\0\1\215\35\0\1\216"+
    "\32\0\1\217\26\0\1\220\52\0\1\221\14\0\1\222"+
    "\24\0\1\223\45\0\1\224\17\0\1\225\42\0\1\226"+
    "\33\0\1\227\36\0\1\230\33\0\1\231\26\0\1\232"+
    "\23\0\1\233\44\0\1\234\25\0\1\235\32\0\1\236"+
    "\37\0\1\237\27\0\1\240\35\0\1\241\31\0\1\242"+
    "\34\0\1\243\30\0\1\244\34\0\1\245\31\0\1\246"+
    "\20\0\1\247\43\0\1\250\30\0\1\251\25\0\1\252"+
    "\36\0\1\253\24\0\1\254\37\0\1\255\22\0\1\256"+
    "\44\0\1\257\30\0\1\260\33\0\1\261\21\0\1\262"+
    "\50\0\1\263\14\0\1\264\34\0\1\265\22\0\1\266"+
    "\15\0\1\267\24\0\1\270\51\0\1\271\26\0\1\272"+
    "\41\0\1\273\15\0\1\274\37\0\1\275\16\0\1\276"+
    "\56\0\1\277\25\0\1\300\31\0\1\301\33\0\1\302"+
    "\27\0\1\303\26\0\1\304\46\0\1\305\24\0\1\306"+
    "\20\0\1\307\36\0\1\310\46\0\1\311\24\0\1\312"+
    "\25\0\1\313\33\0\1\314\23\0\1\315\33\0\1\316"+
    "\33\0\1\317\41\0\1\320\33\0\1\321\25\0\1\322"+
    "\36\0\1\323\16\0\1\324\51\0\1\325\30\0\1\326"+
    "\36\0\1\327\13\0\1\330\22\0\1\331\22\0\1\332"+
    "\26\0\1\333\45\0\1\334\6\0\1\335\32\0\1\336"+
    "\37\0\1\337\31\0\1\340\31\0\1\341\27\0\1\342"+
    "\50\0\1\343\44\0\1\344\14\0\1\345\20\0\1\346"+
    "\42\0\1\347\33\0\1\350\25\0\1\351\43\0\1\352"+
    "\31\0\1\353\37\0\1\354\26\0\1\355\17\0\1\356"+
    "\40\0\1\357\34\0\1\360\20\0\1\361\46\0\1\362"+
    "\33\0\1\363\26\0\1\364\27\0\1\365\50\0\1\366"+
    "\13\0\1\367\5\0\1\370\5\0\1\371\1\0\1\372"+
    "\13\0\1\373\37\0\1\374\25\0\1\375\51\0\1\376"+
    "\26\0\1\377\23\0\1\u0100\22\0\1\u0101\45\0\1\u0102"+
    "\30\0\1\u0103\30\0\1\u0104\30\0\1\u0105\35\0\1\u0106"+
    "\27\0\1\u0107\41\0\1\u0108\16\0\1\u0109\50\0\1\u010a"+
    "\40\0\1\u010b\23\0\1\u010c\31\0\1\u010d\37\0\1\u010e"+
    "\27\0\1\u010f\20\0\1\u0110\32\0\1\u0111\32\0\1\u0112"+
    "\50\0\1\u0113\24\0\1\u0114\16\0\1\u0115\43\0\1\u0116"+
    "\43\0\1\u0117\21\0\1\u0118\21\0\1\u0119\56\0\1\u011a"+
    "\12\0\1\u011b\45\0\1\u011c\22\0\1\u011d\33\0\1\u011e"+
    "\33\0\1\u011f\27\0\1\u0120\41\0\1\u0121\31\0\1\u0122"+
    "\22\0\1\u0123\31\0\1\u0124\34\0\1\u0125\35\0\1\u0126"+
    "\41\0\1\u0127\16\0\1\u0128\43\0\1\u0129\30\0\1\u012a"+
    "\24\0\1\u012b\36\0\1\u012c\31\0\1\u012d\27\0\1\u012e"+
    "\37\0\1\u012f\37\0\1\u0130\17\0\1\u0131\47\0\1\u0132"+
    "\22\0\1\u0133\34\0\1\u0134\30\0\1\u0135\27\0\1\u0136"+
    "\35\0\1\u0137\33\0\1\u0138\36\0\1\u0139\25\0\1\u013a"+
    "\33\0\1\u013b\32\0\1\u013c\25\0\1\u013d\55\0\1\u013e"+
    "\15\0\1\u013f\35\0\1\u0140\27\0\1\u0141\42\0\1\u0142"+
    "\27\0\1\u0143\34\0\1\u0144\23\0\1\u0145\31\0\1\u0146"+
    "\41\0\1\u0147\24\0\1\u0148\26\0\1\u0149\36\0\1\u014a"+
    "\20\0\1\u014b\56\0\1\u014c\20\0\1\u014d\31\0\1\u014e"+
    "\36\0\1\u014f\25\0\1\u0150\36\0\1\u0151\26\0\1\u0152"+
    "\31\0\1\u0153\34\0\1\u0154\31\0\1\u0155\22\0\1\u0156"+
    "\44\0\1\u0157\30\0\1\u0158\32\0\1\u0159\44\0\1\u015a"+
    "\17\0\1\u015b\43\0\1\u015c\32\0\1\u015d\26\0\1\u015e"+
    "\24\0\1\u015f\26\0\1\u0160\44\0\1\u0161\42\0\1\u0162"+
    "\32\0\1\u0163\20\0\1\u0164\34\0\1\u0165\33\0\1\u0166"+
    "\25\0\1\u0167\43\0\1\u0168\21\0\1\u0169\34\0\1\u016a"+
    "\36\0\1\u016b\25\0\1\u016c\35\0\1\u016d\42\0\1\u016e"+
    "\6\0\1\u016f\46\0\1\u0170\32\0\1\u0171\42\0\1\u0172"+
    "\14\0\1\u0173\42\0\1\u0174\40\0\1\u0175\24\0\1\u0176"+
    "\40\0\1\u0177\11\0\1\u0178\40\0\1\u0179\36\0\1\u017a"+
    "\34\0\1\u017b\37\0\1\u017c\26\0\1\u017d\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8937];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\23\1\52\0\1\11\11\0\1\11\2\0"+
    "\1\11\13\0\1\11\7\0\1\11\23\0\1\11\3\0"+
    "\2\11\6\0\1\11\2\0\1\11\12\0\1\11\1\1"+
    "\6\0\2\11\1\0\1\11\2\0\2\11\2\0\1\11"+
    "\11\0\1\11\1\0\1\11\15\0\1\11\6\0\1\11"+
    "\30\0\1\11\14\0\1\11\3\0\1\11\10\0\1\11"+
    "\30\0\1\11\7\0\1\11\1\0\1\11\5\0\1\11"+
    "\13\0\1\11\1\0\1\11\15\0\1\11\1\0\1\11"+
    "\13\0\1\11\5\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\1\11\4\0\1\11\2\0\1\11"+
    "\1\0\1\11\2\0\1\11\7\0\1\11\3\0\1\11"+
    "\1\0\2\11\3\0\1\11\3\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[381];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _YangLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _YangLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 54: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 55: break;
          case 3: 
            { return YANG_ONE;
            } 
            // fall through
          case 56: break;
          case 4: 
            { return YANG_TAB;
            } 
            // fall through
          case 57: break;
          case 5: 
            { return YANG_TWO;
            } 
            // fall through
          case 58: break;
          case 6: 
            { return YANG_DOT;
            } 
            // fall through
          case 59: break;
          case 7: 
            { return YANG_SIX;
            } 
            // fall through
          case 60: break;
          case 8: 
            { return YANG_NINE;
            } 
            // fall through
          case 61: break;
          case 9: 
            { return YANG_FOUR;
            } 
            // fall through
          case 62: break;
          case 10: 
            { return YANG_FIVE;
            } 
            // fall through
          case 63: break;
          case 11: 
            { return YANG_HASH;
            } 
            // fall through
          case 64: break;
          case 12: 
            { return YANG_DASH;
            } 
            // fall through
          case 65: break;
          case 13: 
            { return YANG_PIPE;
            } 
            // fall through
          case 66: break;
          case 14: 
            { return YANG_ZERO;
            } 
            // fall through
          case 67: break;
          case 15: 
            { return YANG_COLON;
            } 
            // fall through
          case 68: break;
          case 16: 
            { return YANG_COMMA;
            } 
            // fall through
          case 69: break;
          case 17: 
            { return YANG_EIGHT;
            } 
            // fall through
          case 70: break;
          case 18: 
            { return YANG_TILDE;
            } 
            // fall through
          case 71: break;
          case 19: 
            { return YANG_THREE;
            } 
            // fall through
          case 72: break;
          case 20: 
            { return YANG_ALPHA;
            } 
            // fall through
          case 73: break;
          case 21: 
            { return YANG_SEVEN;
            } 
            // fall through
          case 74: break;
          case 22: 
            { return YANG_SPACE;
            } 
            // fall through
          case 75: break;
          case 23: 
            { return YANG_EQUALS;
            } 
            // fall through
          case 76: break;
          case 24: 
            { return YANG_HEXDIG;
            } 
            // fall through
          case 77: break;
          case 25: 
            { return YANG_AT_SIGN;
            } 
            // fall through
          case 78: break;
          case 26: 
            { return YANG_VERSION;
            } 
            // fall through
          case 79: break;
          case 27: 
            { return YANG_LINEFEED;
            } 
            // fall through
          case 80: break;
          case 28: 
            { return YANG_ASTERISK;
            } 
            // fall through
          case 81: break;
          case 29: 
            { return YANG_AMPERSAND;
            } 
            // fall through
          case 82: break;
          case 30: 
            { return YANG_SEMICOLON;
            } 
            // fall through
          case 83: break;
          case 31: 
            { return YANG_PLUS_SIGN;
            } 
            // fall through
          case 84: break;
          case 32: 
            { return YANG_LEFT_BRACE;
            } 
            // fall through
          case 85: break;
          case 33: 
            { return YANG_DOUBLE_DOT;
            } 
            // fall through
          case 86: break;
          case 34: 
            { return YANG_UNDERSCORE;
            } 
            // fall through
          case 87: break;
          case 35: 
            { return YANG_RIGHT_BRACE;
            } 
            // fall through
          case 88: break;
          case 36: 
            { return YANG_DOLLAR_SIGN;
            } 
            // fall through
          case 89: break;
          case 37: 
            { return YANG_OPEN_BRACKET;
            } 
            // fall through
          case 90: break;
          case 38: 
            { return YANG_DOUBLE_COLON;
            } 
            // fall through
          case 91: break;
          case 39: 
            { return YANG_DOUBLE_QUOTE;
            } 
            // fall through
          case 92: break;
          case 40: 
            { return YANG_SINGLE_QUOTE;
            } 
            // fall through
          case 93: break;
          case 41: 
            { return YANG_PERCENT_SIGN;
            } 
            // fall through
          case 94: break;
          case 42: 
            { return YANG_BLOCK_COMMENT;
            } 
            // fall through
          case 95: break;
          case 43: 
            { return YANG_FORWARD_SLASH;
            } 
            // fall through
          case 96: break;
          case 44: 
            { return YANG_QUESTION_MARK;
            } 
            // fall through
          case 97: break;
          case 45: 
            { return YANG_PARENT_FOLDER;
            } 
            // fall through
          case 98: break;
          case 46: 
            { return YANG_CLOSED_BRACKET;
            } 
            // fall through
          case 99: break;
          case 47: 
            { return YANG_CARRIAGE_RETURN;
            } 
            // fall through
          case 100: break;
          case 48: 
            { return YANG_POSITIVE_NUMBER;
            } 
            // fall through
          case 101: break;
          case 49: 
            { return YANG_LEFT_PARENTHESIS;
            } 
            // fall through
          case 102: break;
          case 50: 
            { return YANG_EXCLAMATION_MARK;
            } 
            // fall through
          case 103: break;
          case 51: 
            { return YANG_RIGHT_PARENTHESIS;
            } 
            // fall through
          case 104: break;
          case 52: 
            { return YANG_ZERO_LENGHT_STRING;
            } 
            // fall through
          case 105: break;
          case 53: 
            { return YANG_DOUBLE_FORWARD_SLASH;
            } 
            // fall through
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
