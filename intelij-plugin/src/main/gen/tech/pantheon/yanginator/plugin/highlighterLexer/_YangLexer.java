/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

/*
 *
 *   Copyright (c) 2021 PANTHEON.tech, s.r.o. All rights reserved.
 *
 *   This program and the accompanying materials are made available under the
 *   terms of the Eclipse Public License v1.0 which accompanies this distribution,
 *   and is available at http://www.eclipse.org/legal/epl-v10.html
 *
 */

package tech.pantheon.yanginator.plugin.highlighterLexer;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_ADD_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_ANYXML_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_ARGUMENT_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_AUGMENT_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_BASE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_BELONGS_TO_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_BIT_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_BLOCK_COMMENT;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_CASE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_CHOICE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_CONFIG_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_CONTACT_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_CONTAINER_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_CURRENT_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_DATE_ARG;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_DEFAULT_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_DELETE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_DEPRECATED_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_DESCRIPTION_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_DEVIATE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_DEVIATION_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_ENUM_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_ERROR_APP_TAG_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_ERROR_MESSAGE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_EXTENSION_IDENTIFIER;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_EXTENSION_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_FALSE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_FEATURE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_FRACTION_DIGITS_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_GROUPING_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_IDENTIFIER;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_IDENTITY_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_IF_FEATURE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_IMPORT_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_INCLUDE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_INPUT_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_KEY_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_LEAF_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_LEAF_LIST_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_LENGTH_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_LIST_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_MANDATORY_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_MAX_ELEMENTS_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_MAX_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_MIN_ELEMENTS_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_MIN_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_MODULE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_MUST_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_NAMESPACE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_NOTIFICATION_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_NOT_STRING;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_NOT_SUPPORTED_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_OBSOLETE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_ORDERED_BY_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_ORGANIZATION_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_OUTPUT_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_PATH_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_PATTERN_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_POSITION_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_PREFIX_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_PRESENCE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_RANGE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_REFERENCE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_REFINE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_REPLACE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_REQUIRE_INSTANCE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_REVISION_DATE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_REVISION_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_RPC_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_SEMICOLON;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_SINGLE_LINE_COMMENT;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_STATUS_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_STRING;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_SUBMODULE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_SYSTEM_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_TRUE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_TYPEDEF_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_TYPE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_UNBOUNDED_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_UNIQUE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_UNITS_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_USER_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_USES_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_VALUE_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_WHEN_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_YANG_VERSION_KEYWORD;
import static tech.pantheon.yanginator.plugin.psi.YangTypes.YANG_H_YIN_ELEMENT_KEYWORD;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_YangHighlighterLexer.flex</tt>
 */
public class _YangLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\2\3\1\22\0\1\1\1\0\1\4\7\0\1\14\2\0\1\7\1\11\1\13\12\6\1\12\1"+
    "\3\5\0\32\10\1\0\1\5\2\0\1\10\1\0\1\15\1\30\1\34\1\37\1\26\1\36\1\24\1\35"+
    "\1\33\1\10\1\42\1\22\1\21\1\16\1\32\1\40\1\44\1\23\1\31\1\27\1\25\1\41\1\45"+
    "\1\20\1\17\1\43\12\0\1\1\32\0\1\1\337\0\1\1\177\0\13\1\35\0\2\1\5\0\1\1\57"+
    "\0\1\1\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\1"+
    "\25\5\1\0\1\6\1\0\1\1\1\7\1\10\1\1"+
    "\64\5\1\6\2\1\1\0\1\1\3\5\1\11\5\5"+
    "\1\12\2\5\1\13\10\5\1\14\13\5\1\15\34\5"+
    "\1\16\1\5\2\1\1\0\1\17\12\5\1\20\2\5"+
    "\1\21\1\5\1\22\12\5\1\23\1\24\1\25\2\5"+
    "\1\26\1\27\1\30\15\5\1\31\15\5\1\32\4\5"+
    "\1\33\1\1\1\17\16\5\1\34\7\5\1\35\15\5"+
    "\1\36\7\5\1\37\13\5\1\40\1\1\1\41\11\5"+
    "\1\42\2\5\1\43\1\5\1\44\5\5\1\45\4\5"+
    "\1\46\1\5\1\47\2\5\1\50\2\5\1\51\5\5"+
    "\1\52\1\53\2\5\1\54\6\5\1\55\1\5\2\1"+
    "\1\5\1\56\12\5\1\57\7\5\1\60\5\5\1\61"+
    "\2\5\1\62\1\5\1\63\1\5\1\64\1\5\1\65"+
    "\1\5\1\66\1\5\1\67\2\5\1\70\1\71\12\5"+
    "\1\72\1\5\1\73\10\5\1\74\1\5\1\75\5\5"+
    "\1\76\1\77\1\70\1\100\4\5\1\101\2\5\1\102"+
    "\1\103\2\5\1\104\1\105\3\5\1\106\3\5\1\107"+
    "\3\5\1\110\12\5\1\111\1\5\1\112\1\113\2\5"+
    "\1\114\3\5\1\115\10\5\1\116\1\5\1\117\1\120"+
    "\1\121\1\122\4\5\1\123\1\5\1\124\1\125\1\5"+
    "\1\126\1\127\4\5\1\130\1\131";

  private static int [] zzUnpackAction() {
    int [] result = new int[497];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\230\0\276\0\344\0\u010a"+
    "\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\u0214\0\u023a"+
    "\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8\0\u031e\0\u0344\0\u036a"+
    "\0\u0390\0\u03b6\0\u03dc\0\u0402\0\u0428\0\230\0\162\0\u044e"+
    "\0\u0474\0\u049a\0\u04c0\0\u04e6\0\u050c\0\u0532\0\u0558\0\u057e"+
    "\0\u05a4\0\u05ca\0\u05f0\0\u0616\0\u063c\0\u0662\0\u0688\0\u06ae"+
    "\0\u06d4\0\u06fa\0\u0720\0\u0746\0\u076c\0\u0792\0\u07b8\0\u07de"+
    "\0\u0804\0\u082a\0\u0850\0\u0876\0\u089c\0\u08c2\0\u08e8\0\u090e"+
    "\0\u0934\0\u095a\0\u0980\0\u09a6\0\u09cc\0\u09f2\0\u0a18\0\u0a3e"+
    "\0\u0a64\0\u0a8a\0\u0ab0\0\u0ad6\0\u0afc\0\u0b22\0\u0b48\0\u0b6e"+
    "\0\u0b94\0\u0bba\0\u0be0\0\u0c06\0\u0c2c\0\u0c52\0\u0c78\0\u0c9e"+
    "\0\230\0\u0cc4\0\u0cea\0\u0d10\0\u0d36\0\u0d5c\0\u0d82\0\u0da8"+
    "\0\344\0\u0dce\0\u0df4\0\u0e1a\0\u0e40\0\u0e66\0\u0e8c\0\u0eb2"+
    "\0\u0ed8\0\u0efe\0\u0f24\0\u0f4a\0\u0f70\0\u0f96\0\u0fbc\0\u0fe2"+
    "\0\u1008\0\u102e\0\344\0\u1054\0\u107a\0\u10a0\0\u10c6\0\u10ec"+
    "\0\u1112\0\u1138\0\u115e\0\u1184\0\u11aa\0\u11d0\0\344\0\u11f6"+
    "\0\u121c\0\u1242\0\u1268\0\u128e\0\u12b4\0\u12da\0\u1300\0\u1326"+
    "\0\u134c\0\u1372\0\u1398\0\u13be\0\u13e4\0\u140a\0\u1430\0\u1456"+
    "\0\u147c\0\u14a2\0\u14c8\0\u14ee\0\u1514\0\u153a\0\u1560\0\u1586"+
    "\0\u15ac\0\u15d2\0\u15f8\0\344\0\u161e\0\u1644\0\u166a\0\u1690"+
    "\0\46\0\u16b6\0\u16dc\0\u1702\0\u1728\0\u174e\0\u1774\0\u179a"+
    "\0\u17c0\0\u17e6\0\u180c\0\344\0\u1832\0\u1858\0\u187e\0\u18a4"+
    "\0\344\0\u18ca\0\u18f0\0\u1916\0\u193c\0\u1962\0\u1988\0\u19ae"+
    "\0\u19d4\0\u19fa\0\u1a20\0\344\0\344\0\344\0\u1a46\0\u1a6c"+
    "\0\u1a92\0\344\0\344\0\u1ab8\0\u1ade\0\u1b04\0\u1b2a\0\u1b50"+
    "\0\u1b76\0\u1b9c\0\u1bc2\0\u1be8\0\u1c0e\0\u1c34\0\u1c5a\0\u1c80"+
    "\0\344\0\u1ca6\0\u1ccc\0\u1cf2\0\u1d18\0\u1d3e\0\u1d64\0\u1d8a"+
    "\0\u1db0\0\u1dd6\0\u1dfc\0\u1e22\0\u1e48\0\u1e6e\0\344\0\u1e94"+
    "\0\u1eba\0\u1ee0\0\u1f06\0\344\0\u1f2c\0\162\0\u1f52\0\u1f78"+
    "\0\u1f9e\0\u1fc4\0\u1fea\0\u2010\0\u2036\0\u205c\0\u2082\0\u20a8"+
    "\0\u20ce\0\u20f4\0\u211a\0\u2140\0\344\0\u2166\0\u218c\0\u21b2"+
    "\0\u21d8\0\u21fe\0\u2224\0\u224a\0\344\0\u2270\0\u2296\0\u22bc"+
    "\0\u22e2\0\u2308\0\u232e\0\u2354\0\u237a\0\u23a0\0\u23c6\0\u23ec"+
    "\0\u2412\0\u2438\0\344\0\u245e\0\u2484\0\u24aa\0\u24d0\0\u24f6"+
    "\0\u251c\0\u2542\0\344\0\u2568\0\u258e\0\u25b4\0\u25da\0\u2600"+
    "\0\u2626\0\u264c\0\u2672\0\u2698\0\u26be\0\u26e4\0\344\0\u270a"+
    "\0\344\0\u2730\0\u2756\0\u277c\0\u27a2\0\u27c8\0\u27ee\0\u2814"+
    "\0\u283a\0\u2860\0\344\0\u2886\0\u28ac\0\344\0\u28d2\0\344"+
    "\0\u28f8\0\u291e\0\u2944\0\u296a\0\u2990\0\344\0\u29b6\0\u29dc"+
    "\0\u2a02\0\u2a28\0\344\0\u2a4e\0\344\0\u2a74\0\u2a9a\0\344"+
    "\0\u2ac0\0\u2ae6\0\344\0\u2b0c\0\u2b32\0\u2b58\0\u2b7e\0\u2ba4"+
    "\0\344\0\344\0\u2bca\0\u2bf0\0\344\0\u2c16\0\u2c3c\0\u2c62"+
    "\0\u2c88\0\u2cae\0\u2cd4\0\344\0\u2cfa\0\u2d20\0\u2d46\0\u2d6c"+
    "\0\344\0\u2d92\0\u2db8\0\u2dde\0\u2e04\0\u2e2a\0\u2e50\0\u2e76"+
    "\0\u2e9c\0\u2ec2\0\u2ee8\0\344\0\u2f0e\0\u2f34\0\u2f5a\0\u2f80"+
    "\0\u2fa6\0\u2fcc\0\u2ff2\0\344\0\u3018\0\u303e\0\u3064\0\u308a"+
    "\0\u30b0\0\344\0\u30d6\0\u30fc\0\344\0\u3122\0\344\0\u3148"+
    "\0\344\0\u316e\0\344\0\u3194\0\344\0\u31ba\0\344\0\u31e0"+
    "\0\u3206\0\u322c\0\344\0\u3252\0\u3278\0\u329e\0\u32c4\0\u32ea"+
    "\0\u3310\0\u3336\0\u335c\0\u3382\0\u33a8\0\u33ce\0\u33f4\0\344"+
    "\0\u341a\0\u3440\0\u3466\0\u348c\0\u34b2\0\u34d8\0\u34fe\0\u3524"+
    "\0\344\0\u354a\0\344\0\u3570\0\u3596\0\u35bc\0\u35e2\0\u3608"+
    "\0\344\0\344\0\46\0\344\0\u362e\0\u3654\0\u367a\0\u36a0"+
    "\0\344\0\u36c6\0\u36ec\0\344\0\344\0\u3712\0\u3738\0\344"+
    "\0\344\0\u375e\0\u3784\0\u37aa\0\344\0\u37d0\0\u37f6\0\u381c"+
    "\0\344\0\u3842\0\u3868\0\u388e\0\344\0\u38b4\0\u38da\0\u3900"+
    "\0\u3926\0\u394c\0\u3972\0\u3998\0\u39be\0\u39e4\0\u3a0a\0\344"+
    "\0\u3a30\0\344\0\344\0\u3a56\0\u3a7c\0\344\0\u3aa2\0\u3ac8"+
    "\0\u3aee\0\344\0\u3b14\0\u3b3a\0\u3b60\0\u3b86\0\u3bac\0\u3bd2"+
    "\0\u3bf8\0\u3c1e\0\344\0\u3c44\0\344\0\344\0\344\0\344"+
    "\0\u3c6a\0\u3c90\0\u3cb6\0\u3cdc\0\344\0\u3d02\0\344\0\344"+
    "\0\u3d28\0\344\0\344\0\u3d4e\0\u3d74\0\u3d9a\0\u3dc0\0\344"+
    "\0\344";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[497];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\2\1\6\1\2\1\7"+
    "\2\2\1\10\1\2\1\11\1\12\1\13\1\7\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\7\1\30\1\31\1\32\1\33"+
    "\1\34\2\7\1\35\1\2\4\0\41\2\1\0\2\3"+
    "\111\0\4\36\1\37\1\40\40\36\1\2\4\0\1\2"+
    "\1\41\40\2\4\0\1\2\4\7\1\42\2\2\31\7"+
    "\1\2\4\0\6\2\1\43\1\44\32\2\4\0\1\2"+
    "\4\7\1\42\2\2\1\7\1\45\4\7\1\46\1\7"+
    "\1\47\11\7\1\50\6\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\1\51\14\7\1\52\13\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\1\53\15\7\1\54\12\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\1\55\7\7"+
    "\1\56\4\7\1\57\1\60\12\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\11\7\1\61\4\7\1\62\12\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\1\63\10\7"+
    "\1\64\11\7\1\65\5\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\6\7\1\66\22\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\1\7\1\67\12\7\1\70\14\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\1\7\1\71"+
    "\1\7\1\72\2\7\1\73\22\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\2\7\1\74\3\7\1\75\22\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\1\76\10\7"+
    "\1\77\4\7\1\100\12\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\2\7\1\101\5\7\1\102\1\7\1\103"+
    "\16\7\1\2\4\0\1\2\4\7\1\42\2\2\6\7"+
    "\1\104\1\7\1\105\2\7\1\106\15\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\1\7\1\107\2\7\1\110"+
    "\14\7\1\111\1\112\6\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\1\113\7\7\1\114\4\7\1\115\2\7"+
    "\1\116\10\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\1\117\5\7\1\120\2\7\1\121\17\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\11\7\1\122\17\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\1\123\5\7\1\124"+
    "\6\7\1\125\13\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\1\126\30\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\11\7\1\127\17\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\20\7\1\130\10\7\4\36\1\131\1\40"+
    "\40\36\1\2\4\0\1\2\1\132\40\2\4\0\1\2"+
    "\5\42\2\2\31\42\2\43\1\0\43\43\1\133\4\134"+
    "\7\133\1\135\31\133\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\2\7\1\136\26\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\7\7\1\137\21\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\7\7\1\140\21\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\22\7\1\141\6\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\4\7\1\142\24\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\12\7\1\143"+
    "\16\7\1\2\4\0\1\2\4\7\1\42\2\2\1\7"+
    "\1\144\27\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\1\7\1\145\27\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\1\7\1\146\1\7\1\147\25\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\14\7\1\150\14\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\22\7\1\151\6\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\1\7\1\152"+
    "\27\7\1\2\4\0\1\2\4\7\1\42\2\2\1\153"+
    "\1\154\27\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\14\7\1\155\14\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\1\7\1\156\27\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\21\7\1\157\1\7\1\160\1\161\2\7"+
    "\1\162\1\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\17\7\1\163\11\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\15\7\1\164\13\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\13\7\1\165\2\7\1\166\12\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\11\7\1\167\17\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\10\7\1\170"+
    "\20\7\1\2\4\0\1\2\4\7\1\42\2\2\12\7"+
    "\1\171\16\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\6\7\1\172\22\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\23\7\1\173\5\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\10\7\1\174\20\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\14\7\1\175\14\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\5\7\1\176\23\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\12\7\1\177\16\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\14\7\1\200"+
    "\14\7\1\2\4\0\1\2\4\7\1\42\2\2\13\7"+
    "\1\201\15\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\1\202\30\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\7\7\1\203\12\7\1\204\6\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\12\7\1\205\16\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\14\7\1\206\14\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\17\7\1\207\3\7"+
    "\1\210\5\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\23\7\1\211\5\7\1\2\4\0\1\2\1\7\1\212"+
    "\2\7\1\42\2\2\31\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\11\7\1\213\17\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\14\7\1\214\14\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\6\7\1\215\22\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\1\7\1\216\27\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\15\7\1\217"+
    "\13\7\1\2\4\0\1\2\4\7\1\42\2\2\5\7"+
    "\1\220\23\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\1\221\30\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\1\222\30\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\5\7\1\223\6\7\1\224\4\7\1\225\1\7\1\226"+
    "\1\227\4\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\12\7\1\230\16\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\11\7\1\231\17\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\14\7\1\232\14\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\5\7\1\233\23\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\2\7\1\234\26\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\11\7\1\235\17\7"+
    "\1\2\4\0\1\2\1\236\37\2\1\133\4\134\7\133"+
    "\1\237\31\133\14\134\1\240\31\134\1\2\4\0\6\2"+
    "\1\241\1\135\32\2\4\0\1\2\4\7\1\42\2\2"+
    "\3\7\1\242\25\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\10\7\1\243\20\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\4\7\1\244\24\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\11\7\1\245\17\7\1\2\4\0"+
    "\1\2\1\7\1\246\2\7\1\42\2\2\16\7\1\247"+
    "\12\7\1\2\4\0\1\2\4\7\1\42\2\2\7\7"+
    "\1\250\21\7\1\2\4\0\1\2\1\7\1\251\2\7"+
    "\1\42\2\2\31\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\22\7\1\252\6\7\1\2\4\0\1\2\1\7"+
    "\1\253\2\7\1\42\2\2\31\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\12\7\1\254\16\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\10\7\1\255\20\7\1\2"+
    "\4\0\1\2\1\7\1\256\2\7\1\42\2\2\31\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\21\7\1\257"+
    "\7\7\1\2\4\0\1\2\4\7\1\42\2\2\7\7"+
    "\1\260\21\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\12\7\1\261\16\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\7\7\1\262\21\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\11\7\1\263\4\7\1\264\12\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\5\7\1\265\23\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\16\7\1\266"+
    "\12\7\1\2\4\0\1\2\4\7\1\42\2\2\10\7"+
    "\1\267\20\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\10\7\1\270\20\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\15\7\1\271\13\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\12\7\1\272\14\7\1\273\1\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\6\7\1\274\5\7"+
    "\1\275\14\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\4\7\1\276\24\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\11\7\1\277\17\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\15\7\1\300\13\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\11\7\1\301\17\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\11\7\1\302\17\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\11\7\1\303\17\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\15\7\1\304"+
    "\13\7\1\2\4\0\1\2\4\7\1\42\2\2\12\7"+
    "\1\305\16\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\4\7\1\306\24\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\12\7\1\307\16\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\1\310\30\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\11\7\1\311\17\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\23\7\1\312\5\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\15\7\1\313\13\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\5\7\1\314\23\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\10\7\1\315"+
    "\20\7\1\2\4\0\1\2\4\7\1\42\2\2\15\7"+
    "\1\316\13\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\21\7\1\317\7\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\1\7\1\320\27\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\11\7\1\321\17\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\6\7\1\322\22\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\12\7\1\323\6\7\1\324"+
    "\7\7\1\2\4\0\1\2\4\7\1\42\2\2\16\7"+
    "\1\325\12\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\14\7\1\326\14\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\17\7\1\327\11\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\12\7\1\330\16\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\11\7\1\331\17\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\17\7\1\332\11\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\1\333\30\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\6\7\1\334\22\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\16\7\1\335"+
    "\12\7\1\2\4\0\1\2\4\7\1\42\2\2\12\7"+
    "\1\336\5\7\1\337\10\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\14\7\1\340\4\7\1\341\7\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\16\7\1\342\12\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\10\7\1\343"+
    "\20\7\1\2\4\0\1\2\4\7\1\42\2\2\1\7"+
    "\1\344\27\7\1\2\4\0\2\2\1\345\36\2\1\133"+
    "\4\134\6\133\1\241\1\237\31\133\13\134\1\346\1\240"+
    "\31\134\1\2\4\0\1\2\4\7\1\42\2\2\4\7"+
    "\1\347\24\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\4\7\1\350\24\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\11\7\1\351\17\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\14\7\1\352\14\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\14\7\1\353\14\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\21\7\1\354\7\7\1\2"+
    "\4\0\1\2\1\7\1\355\2\7\1\42\2\2\31\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\11\7\1\356"+
    "\17\7\1\2\4\0\1\2\4\7\1\42\2\2\1\357"+
    "\30\7\1\2\4\0\1\2\4\7\1\42\2\2\11\7"+
    "\1\360\17\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\5\7\1\361\23\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\11\7\1\362\17\7\1\2\4\0\1\2\1\7"+
    "\1\363\2\7\1\42\2\2\31\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\12\7\1\364\16\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\11\7\1\365\17\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\6\7\1\366\22\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\1\7\1\367"+
    "\27\7\1\2\4\0\1\2\4\7\1\42\2\2\1\370"+
    "\30\7\1\2\4\0\1\2\4\7\1\42\2\2\14\7"+
    "\1\371\14\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\16\7\1\372\12\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\23\7\1\373\5\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\10\7\1\374\20\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\14\7\1\375\14\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\10\7\1\376\20\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\1\7\1\377\27\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\6\7\1\u0100"+
    "\22\7\1\2\4\0\1\2\4\7\1\42\2\2\22\7"+
    "\1\u0101\6\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\1\7\1\u0102\27\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\11\7\1\u0103\17\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\15\7\1\u0104\13\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\10\7\1\u0105\20\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\1\7\1\u0106\27\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\6\7\1\u0107\22\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\10\7\1\u0108"+
    "\20\7\1\2\4\0\1\2\4\7\1\42\2\2\5\7"+
    "\1\u0109\23\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\10\7\1\u010a\20\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\12\7\1\u010b\16\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\6\7\1\u010c\22\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\11\7\1\u010d\17\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\12\7\1\u010e\16\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\11\7\1\u010f\17\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\1\u0110\30\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\16\7\1\u0111"+
    "\12\7\1\2\4\0\1\2\4\7\1\42\2\2\17\7"+
    "\1\u0112\11\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\11\7\1\u0113\17\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\12\7\1\u0114\16\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\10\7\1\u0115\20\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\12\7\1\u0116\16\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\6\7\1\u0117\22\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\10\7\1\u0118\20\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\11\7\1\u0119"+
    "\17\7\1\2\4\0\1\2\4\7\1\42\2\2\1\u011a"+
    "\30\7\1\2\4\0\1\2\4\7\1\42\2\2\11\7"+
    "\1\u011b\17\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\11\7\1\u011c\17\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\16\7\1\u011d\12\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\12\7\1\u011e\16\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\11\7\1\u011f\17\7\1\2\4\0"+
    "\1\2\1\u0120\40\2\4\0\1\2\4\7\1\42\2\2"+
    "\5\7\1\u0121\23\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\11\7\1\u0122\17\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\1\7\1\u0123\27\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\23\7\1\u0124\5\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\10\7\1\u0125\20\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\16\7\1\u0126\12\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\24\7\1\u0127"+
    "\4\7\1\2\4\0\1\2\4\7\1\42\2\2\5\7"+
    "\1\u0128\23\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\12\7\1\u0129\16\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\5\7\1\u012a\23\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\11\7\1\u012b\17\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\5\7\1\u012c\23\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\5\7\1\u012d\23\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\20\7\1\u012e\10\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\11\7\1\u012f"+
    "\17\7\1\2\4\0\1\2\4\7\1\42\2\2\11\7"+
    "\1\u0130\17\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\17\7\1\u0131\11\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\16\7\1\u0132\12\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\6\7\1\u0133\22\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\16\7\1\u0134\12\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\1\7\1\u0135\27\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\11\7\1\u0136\17\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\14\7\1\u0137"+
    "\14\7\1\2\4\0\1\2\1\7\1\u0138\2\7\1\42"+
    "\2\2\31\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\11\7\1\u0139\17\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\7\7\1\u013a\21\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\4\7\1\u013b\24\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\22\7\1\u013c\6\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\14\7\1\u013d\14\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\16\7\1\u013e\12\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\11\7\1\u013f"+
    "\17\7\1\2\4\0\1\2\4\7\1\42\2\2\12\7"+
    "\1\u0140\16\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\11\7\1\u0141\17\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\22\7\1\u0142\6\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\12\7\1\u0143\16\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\1\u0144\30\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\16\7\1\u0145\12\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\1\7\1\u0146\27\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\16\7\1\u0147\1\u0148"+
    "\11\7\1\2\4\0\1\2\4\7\1\42\2\2\7\7"+
    "\1\u0149\21\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\11\7\1\u014a\17\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\16\7\1\u014b\12\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\6\7\1\u014c\22\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\11\7\1\u014d\17\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\16\7\1\u014e\12\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\5\7\1\u014f\23\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\17\7\1\u0150"+
    "\11\7\1\2\4\0\1\2\4\7\1\42\2\2\12\7"+
    "\1\u0151\16\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\6\7\1\u0152\22\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\1\7\1\u0153\27\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\3\7\1\u0154\25\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\16\7\1\u0155\12\7\1\2\4\0"+
    "\1\2\1\u0156\1\u0157\37\2\4\0\1\2\4\7\1\42"+
    "\2\2\1\7\1\u0158\27\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\12\7\1\u0159\16\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\1\u015a\30\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\23\7\1\u015b\5\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\17\7\1\u015c\11\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\11\7\1\u015d\17\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\11\7\1\u015e"+
    "\17\7\1\2\4\0\1\2\4\7\1\42\2\2\15\7"+
    "\1\u015f\13\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\11\7\1\u0160\17\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\11\7\1\u0161\17\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\16\7\1\u0162\12\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\1\7\1\u0163\27\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\11\7\1\u0164\17\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\15\7\1\u0165\13\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\11\7\1\u0166"+
    "\17\7\1\2\4\0\1\2\4\7\1\42\2\2\1\7"+
    "\1\u0167\27\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\22\7\1\u0168\6\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\16\7\1\u0169\12\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\1\u016a\3\7\1\u016b\24\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\21\7\1\u016c\7\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\14\7\1\u016d\14\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\10\7\1\u016e"+
    "\20\7\1\2\4\0\1\2\4\7\1\42\2\2\26\7"+
    "\1\u016f\2\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\22\7\1\u0170\6\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\12\7\1\u0171\16\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\11\7\1\u0172\17\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\12\7\1\u0173\16\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\12\7\1\u0174\16\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\12\7\1\u0175\16\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\1\7\1\u0176"+
    "\27\7\1\2\4\0\1\2\4\7\1\42\2\2\12\7"+
    "\1\u0177\16\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\15\7\1\u0178\13\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\11\7\1\u0179\17\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\23\7\1\u017a\5\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\12\7\1\u017b\16\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\1\u017c\30\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\11\7\1\u017d\4\7\1\u017e"+
    "\12\7\1\2\4\0\1\2\4\7\1\42\2\2\1\7"+
    "\1\u017f\27\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\17\7\1\u0180\11\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\15\7\1\u0181\13\7\1\2\4\0\2\2\1\u0157"+
    "\37\2\4\0\1\2\1\u0182\40\2\4\0\1\2\4\7"+
    "\1\42\2\2\12\7\1\u0183\16\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\17\7\1\u0184\11\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\23\7\1\u0185\5\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\1\u0186\30\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\6\7\1\u0187\22\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\4\7\1\u0188"+
    "\24\7\1\2\4\0\1\2\4\7\1\42\2\2\6\7"+
    "\1\u0189\22\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\4\7\1\u018a\24\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\4\7\1\u018b\24\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\14\7\1\u018c\14\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\17\7\1\u018d\11\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\1\7\1\u018e\27\7\1\2"+
    "\4\0\1\2\1\7\1\u018f\2\7\1\42\2\2\31\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\7\7\1\u0190"+
    "\21\7\1\2\4\0\1\2\4\7\1\42\2\2\11\7"+
    "\1\u0191\17\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\15\7\1\u0192\13\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\23\7\1\u0193\5\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\11\7\1\u0194\17\7\1\2\4\0\1\2"+
    "\1\7\1\u0195\2\7\1\42\2\2\31\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\5\7\1\u0196\23\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\1\u0197\30\7\1\2"+
    "\4\0\1\2\1\7\1\u0198\2\7\1\42\2\2\31\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\11\7\1\u0199"+
    "\17\7\1\2\4\0\1\2\4\7\1\42\2\2\10\7"+
    "\1\u019a\20\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\2\7\1\u019b\26\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\11\7\1\u019c\17\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\1\7\1\u019d\27\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\12\7\1\u019e\16\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\12\7\1\u019f\16\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\15\7\1\u01a0\13\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\11\7\1\u01a1"+
    "\17\7\1\2\4\0\1\2\4\7\1\42\2\2\1\7"+
    "\1\u01a2\27\7\1\2\4\0\1\2\1\u01a3\40\2\4\0"+
    "\1\2\4\7\1\42\2\2\11\7\1\u01a4\17\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\15\7\1\u01a5\13\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\12\7\1\u01a6"+
    "\16\7\1\2\4\0\1\2\4\7\1\42\2\2\14\7"+
    "\1\u01a7\14\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\11\7\1\u01a8\17\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\2\7\1\u01a9\26\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\11\7\1\u01aa\17\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\11\7\1\u01ab\17\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\12\7\1\u01ac\16\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\11\7\1\u01ad\17\7"+
    "\1\2\4\0\1\2\1\7\1\u01ae\2\7\1\42\2\2"+
    "\31\7\1\2\4\0\1\2\4\7\1\42\2\2\16\7"+
    "\1\u01af\12\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\22\7\1\u01b0\6\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\1\7\1\u01b1\27\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\23\7\1\u01b2\5\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\14\7\1\u01b3\14\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\12\7\1\u01b4\16\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\11\7\1\u01b5\17\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\12\7\1\u01b6"+
    "\16\7\1\2\4\0\1\2\4\7\1\42\2\2\13\7"+
    "\1\u01b7\15\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\6\7\1\u01b8\22\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\6\7\1\u01b9\22\7\1\2\4\0\1\2\1\7"+
    "\1\u01ba\2\7\1\42\2\2\31\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\16\7\1\u01bb\12\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\11\7\1\u01bc\17\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\1\7\1\u01bd\27\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\6\7\1\u01be"+
    "\22\7\1\2\4\0\1\2\4\7\1\42\2\2\16\7"+
    "\1\u01bf\12\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\16\7\1\u01c0\12\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\1\7\1\u01c1\27\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\1\7\1\u01c2\27\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\1\7\1\u01c3\27\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\22\7\1\u01c4\6\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\1\7\1\u01c5\27\7"+
    "\1\2\4\0\1\2\1\7\1\u01c6\2\7\1\42\2\2"+
    "\31\7\1\2\4\0\1\2\4\7\1\42\2\2\14\7"+
    "\1\u01c7\14\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\15\7\1\u01c8\13\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\16\7\1\u01c9\12\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\2\7\1\u01ca\26\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\11\7\1\u01cb\17\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\22\7\1\u01cc\6\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\15\7\1\u01cd\13\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\22\7\1\u01ce"+
    "\6\7\1\2\4\0\1\2\4\7\1\42\2\2\12\7"+
    "\1\u01cf\16\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\15\7\1\u01d0\13\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\15\7\1\u01d1\13\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\12\7\1\u01d2\16\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\12\7\1\u01d3\16\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\12\7\1\u01d4\16\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\1\u01d5\30\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\14\7\1\u01d6\14\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\12\7\1\u01d7"+
    "\16\7\1\2\4\0\1\2\4\7\1\42\2\2\1\u01d8"+
    "\30\7\1\2\4\0\1\2\4\7\1\42\2\2\15\7"+
    "\1\u01d9\13\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\16\7\1\u01da\12\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\1\7\1\u01db\27\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\11\7\1\u01dc\17\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\1\7\1\u01dd\27\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\1\7\1\u01de\27\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\14\7\1\u01df\14\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\14\7\1\u01e0"+
    "\14\7\1\2\4\0\1\2\4\7\1\42\2\2\12\7"+
    "\1\u01e1\16\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\12\7\1\u01e2\16\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\1\u01e3\30\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\7\7\1\u01e4\21\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\1\7\1\u01e5\27\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\7\7\1\u01e6\21\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\22\7\1\u01e7\6\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\11\7\1\u01e8\17\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\1\u01e9\30\7"+
    "\1\2\4\0\1\2\4\7\1\42\2\2\7\7\1\u01ea"+
    "\21\7\1\2\4\0\1\2\4\7\1\42\2\2\11\7"+
    "\1\u01eb\17\7\1\2\4\0\1\2\4\7\1\42\2\2"+
    "\16\7\1\u01ec\12\7\1\2\4\0\1\2\4\7\1\42"+
    "\2\2\1\7\1\u01ed\27\7\1\2\4\0\1\2\4\7"+
    "\1\42\2\2\12\7\1\u01ee\16\7\1\2\4\0\1\2"+
    "\4\7\1\42\2\2\17\7\1\u01ef\11\7\1\2\4\0"+
    "\1\2\4\7\1\42\2\2\14\7\1\u01f0\14\7\1\2"+
    "\4\0\1\2\4\7\1\42\2\2\11\7\1\u01f1\17\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15846];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\11\31\1\1\0\1\11\1\0\73\1"+
    "\1\0\103\1\1\0\105\1\1\11\u010b\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[497];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _YangLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _YangLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return YANG_H_NOT_STRING;
            } 
            // fall through
          case 90: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 91: break;
          case 3: 
            { return YANG_H_SEMICOLON;
            } 
            // fall through
          case 92: break;
          case 4: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 93: break;
          case 5: 
            { return YANG_H_IDENTIFIER;
            } 
            // fall through
          case 94: break;
          case 6: 
            { return YANG_H_STRING;
            } 
            // fall through
          case 95: break;
          case 7: 
            { return YANG_H_EXTENSION_IDENTIFIER;
            } 
            // fall through
          case 96: break;
          case 8: 
            { return YANG_H_SINGLE_LINE_COMMENT;
            } 
            // fall through
          case 97: break;
          case 9: 
            { return YANG_H_ADD_KEYWORD;
            } 
            // fall through
          case 98: break;
          case 10: 
            { return YANG_H_MAX_KEYWORD;
            } 
            // fall through
          case 99: break;
          case 11: 
            { return YANG_H_MIN_KEYWORD;
            } 
            // fall through
          case 100: break;
          case 12: 
            { return YANG_H_RPC_KEYWORD;
            } 
            // fall through
          case 101: break;
          case 13: 
            { return YANG_H_BIT_KEYWORD;
            } 
            // fall through
          case 102: break;
          case 14: 
            { return YANG_H_KEY_KEYWORD;
            } 
            // fall through
          case 103: break;
          case 15: 
            { return YANG_H_BLOCK_COMMENT;
            } 
            // fall through
          case 104: break;
          case 16: 
            { return YANG_H_MUST_KEYWORD;
            } 
            // fall through
          case 105: break;
          case 17: 
            { return YANG_H_LEAF_KEYWORD;
            } 
            // fall through
          case 106: break;
          case 18: 
            { return YANG_H_LIST_KEYWORD;
            } 
            // fall through
          case 107: break;
          case 19: 
            { return YANG_H_USER_KEYWORD;
            } 
            // fall through
          case 108: break;
          case 20: 
            { return YANG_H_USES_KEYWORD;
            } 
            // fall through
          case 109: break;
          case 21: 
            { return YANG_H_ENUM_KEYWORD;
            } 
            // fall through
          case 110: break;
          case 22: 
            { return YANG_H_TYPE_KEYWORD;
            } 
            // fall through
          case 111: break;
          case 23: 
            { return YANG_H_TRUE_KEYWORD;
            } 
            // fall through
          case 112: break;
          case 24: 
            { return YANG_H_BASE_KEYWORD;
            } 
            // fall through
          case 113: break;
          case 25: 
            { return YANG_H_CASE_KEYWORD;
            } 
            // fall through
          case 114: break;
          case 26: 
            { return YANG_H_PATH_KEYWORD;
            } 
            // fall through
          case 115: break;
          case 27: 
            { return YANG_H_WHEN_KEYWORD;
            } 
            // fall through
          case 116: break;
          case 28: 
            { return YANG_H_RANGE_KEYWORD;
            } 
            // fall through
          case 117: break;
          case 29: 
            { return YANG_H_UNITS_KEYWORD;
            } 
            // fall through
          case 118: break;
          case 30: 
            { return YANG_H_INPUT_KEYWORD;
            } 
            // fall through
          case 119: break;
          case 31: 
            { return YANG_H_FALSE_KEYWORD;
            } 
            // fall through
          case 120: break;
          case 32: 
            { return YANG_H_VALUE_KEYWORD;
            } 
            // fall through
          case 121: break;
          case 33: 
            { return YANG_H_ANYXML_KEYWORD;
            } 
            // fall through
          case 122: break;
          case 34: 
            { return YANG_H_MODULE_KEYWORD;
            } 
            // fall through
          case 123: break;
          case 35: 
            { return YANG_H_LENGTH_KEYWORD;
            } 
            // fall through
          case 124: break;
          case 36: 
            { return YANG_H_REFINE_KEYWORD;
            } 
            // fall through
          case 125: break;
          case 37: 
            { return YANG_H_UNIQUE_KEYWORD;
            } 
            // fall through
          case 126: break;
          case 38: 
            { return YANG_H_SYSTEM_KEYWORD;
            } 
            // fall through
          case 127: break;
          case 39: 
            { return YANG_H_STATUS_KEYWORD;
            } 
            // fall through
          case 128: break;
          case 40: 
            { return YANG_H_OUTPUT_KEYWORD;
            } 
            // fall through
          case 129: break;
          case 41: 
            { return YANG_H_IMPORT_KEYWORD;
            } 
            // fall through
          case 130: break;
          case 42: 
            { return YANG_H_CONFIG_KEYWORD;
            } 
            // fall through
          case 131: break;
          case 43: 
            { return YANG_H_CHOICE_KEYWORD;
            } 
            // fall through
          case 132: break;
          case 44: 
            { return YANG_H_DELETE_KEYWORD;
            } 
            // fall through
          case 133: break;
          case 45: 
            { return YANG_H_PREFIX_KEYWORD;
            } 
            // fall through
          case 134: break;
          case 46: 
            { return YANG_H_AUGMENT_KEYWORD;
            } 
            // fall through
          case 135: break;
          case 47: 
            { return YANG_H_REPLACE_KEYWORD;
            } 
            // fall through
          case 136: break;
          case 48: 
            { return YANG_H_TYPEDEF_KEYWORD;
            } 
            // fall through
          case 137: break;
          case 49: 
            { return YANG_H_INCLUDE_KEYWORD;
            } 
            // fall through
          case 138: break;
          case 50: 
            { return YANG_H_CURRENT_KEYWORD;
            } 
            // fall through
          case 139: break;
          case 51: 
            { return YANG_H_CONTACT_KEYWORD;
            } 
            // fall through
          case 140: break;
          case 52: 
            { return YANG_H_FEATURE_KEYWORD;
            } 
            // fall through
          case 141: break;
          case 53: 
            { return YANG_H_DEFAULT_KEYWORD;
            } 
            // fall through
          case 142: break;
          case 54: 
            { return YANG_H_DEVIATE_KEYWORD;
            } 
            // fall through
          case 143: break;
          case 55: 
            { return YANG_H_PATTERN_KEYWORD;
            } 
            // fall through
          case 144: break;
          case 56: 
            { return YANG_H_DATE_ARG;
            } 
            // fall through
          case 145: break;
          case 57: 
            { return YANG_H_ARGUMENT_KEYWORD;
            } 
            // fall through
          case 146: break;
          case 58: 
            { return YANG_H_REVISION_KEYWORD;
            } 
            // fall through
          case 147: break;
          case 59: 
            { return YANG_H_GROUPING_KEYWORD;
            } 
            // fall through
          case 148: break;
          case 60: 
            { return YANG_H_OBSOLETE_KEYWORD;
            } 
            // fall through
          case 149: break;
          case 61: 
            { return YANG_H_IDENTITY_KEYWORD;
            } 
            // fall through
          case 150: break;
          case 62: 
            { return YANG_H_PRESENCE_KEYWORD;
            } 
            // fall through
          case 151: break;
          case 63: 
            { return YANG_H_POSITION_KEYWORD;
            } 
            // fall through
          case 152: break;
          case 64: 
            { return YANG_H_NAMESPACE_KEYWORD;
            } 
            // fall through
          case 153: break;
          case 65: 
            { return YANG_H_MANDATORY_KEYWORD;
            } 
            // fall through
          case 154: break;
          case 66: 
            { return YANG_H_LEAF_LIST_KEYWORD;
            } 
            // fall through
          case 155: break;
          case 67: 
            { return YANG_H_REFERENCE_KEYWORD;
            } 
            // fall through
          case 156: break;
          case 68: 
            { return YANG_H_UNBOUNDED_KEYWORD;
            } 
            // fall through
          case 157: break;
          case 69: 
            { return YANG_H_EXTENSION_KEYWORD;
            } 
            // fall through
          case 158: break;
          case 70: 
            { return YANG_H_SUBMODULE_KEYWORD;
            } 
            // fall through
          case 159: break;
          case 71: 
            { return YANG_H_CONTAINER_KEYWORD;
            } 
            // fall through
          case 160: break;
          case 72: 
            { return YANG_H_DEVIATION_KEYWORD;
            } 
            // fall through
          case 161: break;
          case 73: 
            { return YANG_H_BELONGS_TO_KEYWORD;
            } 
            // fall through
          case 162: break;
          case 74: 
            { return YANG_H_ORDERED_BY_KEYWORD;
            } 
            // fall through
          case 163: break;
          case 75: 
            { return YANG_H_IF_FEATURE_KEYWORD;
            } 
            // fall through
          case 164: break;
          case 76: 
            { return YANG_H_DEPRECATED_KEYWORD;
            } 
            // fall through
          case 165: break;
          case 77: 
            { return YANG_H_YIN_ELEMENT_KEYWORD;
            } 
            // fall through
          case 166: break;
          case 78: 
            { return YANG_H_DESCRIPTION_KEYWORD;
            } 
            // fall through
          case 167: break;
          case 79: 
            { return YANG_H_NOTIFICATION_KEYWORD;
            } 
            // fall through
          case 168: break;
          case 80: 
            { return YANG_H_YANG_VERSION_KEYWORD;
            } 
            // fall through
          case 169: break;
          case 81: 
            { return YANG_H_MAX_ELEMENTS_KEYWORD;
            } 
            // fall through
          case 170: break;
          case 82: 
            { return YANG_H_MIN_ELEMENTS_KEYWORD;
            } 
            // fall through
          case 171: break;
          case 83: 
            { return YANG_H_ORGANIZATION_KEYWORD;
            } 
            // fall through
          case 172: break;
          case 84: 
            { return YANG_H_NOT_SUPPORTED_KEYWORD;
            } 
            // fall through
          case 173: break;
          case 85: 
            { return YANG_H_REVISION_DATE_KEYWORD;
            } 
            // fall through
          case 174: break;
          case 86: 
            { return YANG_H_ERROR_APP_TAG_KEYWORD;
            } 
            // fall through
          case 175: break;
          case 87: 
            { return YANG_H_ERROR_MESSAGE_KEYWORD;
            } 
            // fall through
          case 176: break;
          case 88: 
            { return YANG_H_FRACTION_DIGITS_KEYWORD;
            } 
            // fall through
          case 177: break;
          case 89: 
            { return YANG_H_REQUIRE_INSTANCE_KEYWORD;
            } 
            // fall through
          case 178: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
